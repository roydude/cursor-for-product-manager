---
name: 깃 배포 및 브랜치 관리 방식
description: Agent를 활용한 깃 협업 가이드. 비개발직군이 자연어로 요청하면 Agent가 깃 작업을 대신 수행한다.
alwaysApply: false
---

# 깃 배포 및 브랜치 관리 방식

## 목적

- Agent를 통해 자연어로 깃 작업을 수행한다
- 문서 작업의 특성을 고려한 유연한 협업 체계를 수립한다
- 간단한 수정은 빠르게, 중요한 변경은 리뷰를 거치도록 한다
- 여러 협업자가 동시 작업 시 충돌을 방지한다

## 기본 원칙

### 모든 작업은 feature 브랜치에서

- **안정성 보장**: main 브랜치는 항상 안정적인 상태 유지
- **모든 변경사항**: 크고 작은 모든 작업은 feature 브랜치에서 시작
- **선택적 리뷰**: PR 생성 후 셀프 머지 또는 리뷰 요청 선택

### 작업 유형별 가이드

**간단한 수정 → feature 브랜치 + 셀프 머지**

- 오타 수정
- 간단한 내용 추가/수정
- 이미지나 링크 수정
- 형식 정리
- ✅ PR 생성 후 바로 셀프 머지

**중요한 작업 → feature 브랜치 + 리뷰 요청**

- 새로운 PRD 작성
- 핵심 정책 문서 대규모 수정
- 프로토타입 주요 기능 변경
- 여러 파일에 걸친 변경
- 👀 PR 생성 후 Manager에게 리뷰 요청

## Agent 활용 워크플로우

### 1단계: 작업 시작 전 최신 상태 업데이트

**사용자 요청 예시:**

```
최신 버전으로 업데이트해 줘
```

**Agent가 실행할 명령:**

```bash
git checkout main
git pull origin main
```

### 2단계: feature 브랜치 생성 및 작업

**사용자 요청 예시:**

```
feature 브랜치 만들어 줘
브랜치명: feature/홍길동-메인페이지PRD수정
```

**Agent가 실행할 명령:**

```bash
git checkout -b feature/홍길동-메인페이지PRD수정
```

**작업 완료 후 커밋 및 푸시:**

```
작업 완료했어. 커밋하고 푸시해 줘
커밋 메시지: [문서] 메인 페이지 PRD 오타 수정
```

**Agent가 실행할 명령:**

```bash
git add .
git commit -m "[문서] 메인 페이지 PRD 오타 수정"
git push origin feature/홍길동-메인페이지PRD수정
```

### 3단계: Pull Request 생성 및 병합

**사용자가 직접 진행:**

1. GitHub 저장소 페이지 접속
2. "Pull requests" 탭 → "New pull request"
3. base: `main` ← compare: `feature/홍길동-메인페이지PRD수정`
4. 제목과 설명 작성 후 "Create pull request"

**병합 방식 선택:**

- **간단한 수정**: 바로 "Merge pull request" 클릭 (셀프 머지)
- **중요한 작업**: Reviewers에 Manager 지정 후 리뷰 대기

### 4단계: 병합 후 정리

**사용자 요청 예시:**

```
main 브랜치로 돌아가고 최신 내용 받아와 줘
```

**Agent가 실행할 명령:**

```bash
git checkout main
git pull origin main
git branch -d feature/홍길동-메인페이지PRD
```

## Agent 명령어 가이드

### 자주 사용하는 요청 패턴

#### 최신 상태로 업데이트

```
최신 버전으로 업데이트해 줘
main 브랜치 최신으로 당겨와 줘
```

#### feature 브랜치 생성

```
feature 브랜치 만들어 줘
브랜치명: feature/[이름]-[작업내용]
```

#### 커밋 및 푸시

```
작업 완료했어. 커밋하고 푸시해 줘
커밋 메시지: [메시지 내용]
```

#### 브랜치 전환

```
main 브랜치로 전환해 줘
feature/[브랜치명] 브랜치로 전환해 줘
```

#### 현재 상태 확인

```
현재 어떤 브랜치인지 알려줘
수정된 파일 목록 보여줘
```

#### 브랜치 삭제

```
feature/[브랜치명] 브랜치 삭제해 줘
```

## 브랜치 구조

### main 브랜치

- **역할**: 최종 배포 버전
- **보호**: PR을 통해서만 업데이트 (직접 커밋 금지)
- **특징**: 항상 동작하는 안정적인 상태 유지

### feature/\*\* 브랜치

- **역할**: 모든 작업을 위한 임시 브랜치
- **명명 규칙**: `feature/[작성자]-[작업내용]`
- **예시**: `feature/홍길동-PRD오타수정`, `feature/김영희-메인페이지PRD작성`
- **특징**: 작업 완료 후 PR을 통해 main에 병합되면 삭제

## 커밋 메시지 작성 가이드

### 기본 형식

```
[카테고리] 작업 내용을 명확하게 작성
```

### 카테고리

- **[문서]**: PRD, 정책서 등 문서 작업
- **[프로토타입]**: 프로토타입 코드 수정
- **[수정]**: 오타, 링크, 이미지 등 간단한 수정
- **[구조]**: 폴더 구조나 파일 정리

### 예시

**문서 작업:**

```
[문서] 메인 페이지 PRD 초안 작성
[문서] 공고 상세 페이지 PRD - 사용자 시나리오 추가
[문서] 핵심 정책 업데이트 - 회원 인증 정책 추가
```

**프로토타입 작업:**

```
[프로토타입] 프로필 관리 페이지 레이아웃 수정
[프로토타입] 공고 카드 컴포넌트 스타일 개선
[프로토타입] GNB 네비게이션 버튼 추가
```

**수정 작업:**

```
[수정] 공고 상세 페이지 PRD 오타 수정
[수정] 이미지 경로 오류 수정
[수정] README 파일 링크 수정
```

## Pull Request 작성 가이드

### 모든 작업은 PR 필수

모든 변경사항은 feature 브랜치에서 작업 후 PR을 통해 main에 병합합니다.

**셀프 머지 (간단한 작업):**

- ⏩ 오타, 띄어쓰기 수정
- ⏩ 이미지, 링크 수정
- ⏩ README 업데이트
- ⏩ 단순 내용 추가

**리뷰 요청 (중요한 작업):**

- 👀 새로운 PRD 전체 작성
- 👀 핵심 정책 대규모 변경
- 👀 프로토타입 주요 기능 추가/수정
- 👀 여러 팀원이 영향받는 변경사항

### PR 제목 형식

```
[문서/프로토타입] 작업 내용 요약
```

### PR 설명 템플릿

```markdown
## 작업 내용

- 무엇을 작성/수정했는지 간단히 설명

## 변경된 파일

- docs/01_product/05_prd/메인페이지\_PRD.md

## 확인 요청 사항 (선택)

- 특별히 피드백이 필요한 부분
- 논의가 필요한 사항
```

## 충돌 해결

### 충돌이 발생하는 경우

- 같은 파일의 같은 부분을 여러 사람이 동시에 수정했을 때

### Agent를 통한 충돌 해결

**사용자 요청:**

```
main 브랜치 최신 내용을 현재 브랜치에 반영해 줘
```

**Agent가 실행:**

```bash
git fetch origin main
git merge origin/main
```

**충돌 발생 시:**

1. Agent가 충돌 파일 목록을 알려줌
2. 사용자가 해당 파일을 열어서 수동 수정
3. 수정 완료 후: "충돌 해결했어. 커밋해 줘"

## Cursor에서 작업하기

### Source Control 패널 활용

**변경사항 확인:**

- 좌측 "Source Control" 아이콘 클릭
- 수정된 파일 목록 확인

**간단한 커밋/푸시:**

- Agent에게 요청하는 것이 더 빠르고 편리함

**브랜치 전환:**

- 좌측 하단 브랜치 이름 클릭
- 또는 Agent에게 "main 브랜치로 전환해 줘" 요청

## 협업 규칙

### 작업 시작 전

1. 항상 최신 상태로 업데이트 (Agent: "최신 버전으로 업데이트해 줘")
2. 중요한 작업이면 feature 브랜치 생성
3. 다른 팀원과 같은 파일 작업 시 사전 공유

### 작업 중

- 작업 단위를 작게 나누어 자주 커밋
- 명확한 커밋 메시지 작성
- 하루 작업 종료 시 푸시하여 백업

### PR 리뷰 (중요한 작업만)

- **셀프 머지 가능**: 급하거나 확신있는 경우 바로 병합
- **리뷰 요청**: 피드백이 필요하면 Manager에게 요청
- **리뷰 기간**: 요청 후 1-2일 내 확인

## 시즌별 운영 가이드

### 기획 시즌 (PRD 집중 작성 기간)

- feature 브랜치로 작업
- PR 생성 후 Manager에게 리뷰 요청
- 리뷰 피드백 반영 후 병합
- 매일 main 브랜치 업데이트 확인

### 유지보수 시즌 (일상적인 업데이트)

- feature 브랜치로 작업 (동일)
- PR 생성 후 셀프 머지 (리뷰 생략)
- 간단한 수정도 안정성을 위해 PR 프로세스 유지

## 트러블슈팅

### Q1. 푸시가 거부됩니다

**사용자 요청:**

```
최신 버전 받아오고 다시 푸시해 줘
```

**Agent가 실행:**

```bash
# 현재 브랜치의 최신 내용을 받아옴
git pull origin [현재브랜치명]
git push origin [현재브랜치명]
```

### Q2. 실수로 main에서 작업했는데 feature 브랜치로 옮기고 싶어요

**사용자 요청:**

```
변경사항을 임시 저장하고 feature 브랜치 만들어 줘
브랜치명: feature/홍길동-작업내용
```

**Agent가 실행:**

```bash
git stash
git checkout -b feature/홍길동-작업내용
git stash pop
```

### Q3. 마지막 커밋을 취소하고 싶어요 (푸시 전)

**사용자 요청:**

```
방금 커밋 취소해 줘 (파일은 유지)
```

**Agent가 실행:**

```bash
git reset HEAD~1
```

### Q4. 어떤 브랜치에서 작업 중인지 모르겠어요

**사용자 요청:**

```
현재 브랜치 알려줘
수정된 파일 목록 보여줘
```

**Agent가 실행:**

```bash
git branch --show-current
git status
```

## 참고 자료

### 자주 사용하는 Agent 명령어 모음

```
# 작업 시작
최신 버전으로 업데이트해 줘
feature 브랜치 만들어 줘
브랜치명: feature/[이름]-[작업내용]

# 작업 중
작업 완료했어. 커밋하고 푸시해 줘
커밋 메시지: [카테고리] 작업 내용

# 작업 완료 후 (PR 병합 후)
main 브랜치로 전환하고 최신 내용 받아와 줘
feature/[브랜치명] 삭제해 줘
```

### 도움 요청

- **Agent 활용 문의**: 실시간으로 Agent에게 질문
- **충돌 해결 도움**: Manager 또는 팀 채팅방
- **워크플로우 개선 제안**: Manager에게 전달
